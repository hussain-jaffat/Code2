from collections import Counter

# English letter frequency from most to least common
english_freq_order = 'ETAOINSHRDLCUMWFGYPBVKJXQZ'

def monoalphabetic_decrypt(ciphertext):
    ciphertext = ciphertext.upper()
    letters_only = [c for c in ciphertext if c.isalpha()]
    freq = Counter(letters_only)

    # Sort letters in cipher by frequency
    cipher_freq_order = ''.join([item[0] for item in freq.most_common()])

    # Create a tentative mapping from cipher to English letters
    tentative_key = {}
    for i in range(min(len(cipher_freq_order), len(english_freq_order))):
        tentative_key[cipher_freq_order[i]] = english_freq_order[i]

    # Decrypt the message using tentative key
    decrypted = ''
    for char in ciphertext:
        if char in tentative_key:
            decrypted += tentative_key[char]
        else:
            decrypted += char

    return decrypted, tentative_key

# Example usage
cipher = "ZIT JXYI QK GTRMV ZIT RFG QK XZHGVI"
decrypted_text, mapping = monoalphabetic_decrypt(cipher)
print("Tentative Decryption:\n", decrypted_text)
print("\nTentative Mapping:")
print(mapping)
